<?php

namespace bfinlay\SpreadsheetSeeder\Tests;

use bfinlay\SpreadsheetSeeder\SpreadsheetSeederServiceProvider;
use bfinlay\SpreadsheetSeeder\Writers\Text\TextOutputFileRepository;
use Orchestra\Testbench\TestCase;
use PHPUnit\Runner\Version;
use Symfony\Component\Finder\Finder;

/**
 * Class TextOutputTableTest
 * @package bfinlay\SpreadsheetSeeder\Tests
 *
 * 1. creates path
 * 2. creates files with '.md' extension in correct directory
 * 3. creates files with a '.yaml' extension in correct directory
 * 4. '.yaml' files do not delete '.md' extension
 * 5. creating new '.md' files deletes old '.md5' files only
 * 6. creating new '.yaml' files deletes old '.yaml' files only
 */
class TextOutputFileRepositoryTest extends TestCase
{
    protected $path;
    protected $testFiles = [
        'customers.md',
        'employees.md',
        'offices.md',
        'order_details.md',
        'orders.md',
        'payments.md',
        'product_lines.md',
        'products.md',
    ];

    protected function getPackageProviders($app)
    {
        return [SpreadsheetSeederServiceProvider::class];
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->path = __DIR__ . '/TextOutputFileRepositoryTest';
    }

    public function test_path_is_removed()
    {
        if (is_dir($this->path)) {
            array_map('unlink', glob($this->path . "/*"));
            rmdir($this->path);
        }

        if (version_compare(Version::id(), '9.0.0', '<'))
            $this->assertDirectoryNotExists($this->path);
        else
            $this->assertDirectoryDoesNotExist($this->path);
    }


    /**
     * @depends test_path_is_removed
     */
    public function test_path_is_created()
    {
        $markdownRepository = new TextOutputFileRepository($this->path, ".md");
        $this->assertDirectoryExists($this->path);
    }

    protected function createDeletedSheet($name = null, $extension = "md")
    {
        $extension = ltrim($extension, '.*');
        $deletedSheetName = $name ?? "deleted_sheet_test";
        $deletedSheetName = $deletedSheetName . "." . $extension;

        $deletedSheet = new \SplFileObject($this->path . "/" . $deletedSheetName, "w");
        $deletedSheet->fwrite("Test that this file is deleted by the TextOutputFileRepository.");
        $deletedSheet->fflush();
        $deletedSheet = null; // close file handle

        return $deletedSheetName;
    }

    /**
     * @depends test_path_is_created
     */
    public function test_old_markdown_files_deleted()
    {
        foreach (["md", ".md", "*.md"] as $extension) {
            $deletedSheetName = $this->createDeletedSheet();

            $this->assertFileExists($this->path . "/" . $deletedSheetName);

            $markdownRepository = new TextOutputFileRepository($this->path, $extension);
            
            if (version_compare(Version::id(), '9.0.0', '<'))
                $this->assertFileNotExists($this->path . "/" . $deletedSheetName);
            else
                $this->assertFileDoesNotExist($this->path . "/" . $deletedSheetName);

        }
    }

    protected function conditionFileNames($filenames, $extension)
    {
        $extension = ltrim($extension, '.*');
        $baseFileNames = [];
        $expectedFiles = [];

        foreach ($filenames as $file) {
            $pathParts = pathinfo($file);
            $file =  basename($file,'.'.$pathParts['extension']);

            $baseFileNames[] = $file;
            $expectedFiles["$file.$extension"] = false;
        }

        return [
            "base" => $baseFileNames,
            "expected" => $expectedFiles
        ];
    }

    protected function assertTestFilesCreated($filenames, $extension)
    {
        $baseFileNames = $this->conditionFileNames($filenames, $extension)["base"];
        $markdownRepository = new TextOutputFileRepository($this->path, $extension);
        foreach ($baseFileNames as $file) {
            $markdownRepository->openSheet($file);
            $markdownRepository->write("Test that this file is created.");
        }

        $this->assertTestFilesExist($filenames, $extension);
    }

    public function assertTestFilesExist($filenames, $extension)
    {
        $expectedFiles = $this->conditionFileNames($filenames, $extension)["expected"];

        $finder = new Finder();
        $finder->in($this->path)->name("*.$extension")->files();

        foreach ($finder as $file) {
            $this->assertTrue(isset($expectedFiles[$file->getFilename()]), "Unexpected file " . $file->getFilename() . ".");
            $this->assertFalse($expectedFiles[$file->getFilename()], "File " . $file->getFilename() . " has been previously tested which implies multiple copies and should not occur.");
            $expectedFiles[$file->getFilename()] = true;
        }

        foreach ($expectedFiles as $file => $tested) {
            $this->assertTrue($tested, "Expected file $file was not created.");
        }
    }

    public function assertTestFilesDoNotExist($filenames, $extension)
    {
        $expectedFiles = $this->conditionFileNames($filenames, $extension)["expected"];

        $finder = new Finder();
        $finder->in($this->path)->name("*.$extension")->files();

        foreach ($finder as $file) {
            $this->assertFalse(isset($expectedFiles[$file->getFilename()]), "Unexpected file " . $file->getFilename() . ".");
        }
    }

    public function test_markdown_files_created()
    {
        $this->assertTestFilesCreated($this->testFiles, 'md');
    }

    /**
     * @depends test_markdown_files_created
     */
    public function test_yaml_files_created()
    {
        $this->assertTestFilesCreated($this->testFiles, 'yml');
        $this->assertTestFilesExist($this->testFiles, 'md');
    }

    /**
     * @depends test_yaml_files_created
     */
    public function test_old_markdown_files_deleted_and_yaml_files_remain()
    {
        $deletedSheetName = $this->createDeletedSheet();
        $this->assertFileExists($this->path . "/" . $deletedSheetName);
        $this->assertTestFilesCreated($this->testFiles, 'md');
        $this->assertTestFilesExist($this->testFiles, 'yml');

        if (version_compare(Version::id(), '9.0.0', '<'))
            $this->assertFileNotExists($this->path . "/" . $deletedSheetName);
        else
            $this->assertFileDoesNotExist($this->path . "/" . $deletedSheetName);
    }


}
